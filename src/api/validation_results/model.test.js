import { ValidationResults } from '.'
import { User } from '../user'

let user, validationResults

beforeEach(async () => {
  user = await User.create({ email: 'a@a.com', password: '123456' })
  validationResults = await ValidationResults.create({ createdBy: user, taskId: 'test', dpCode: 'test', dpCodeId: 'test', companyId: 'test', companyName: 'test', keyIssueId: 'test', keyIssue: 'test', pillarId: 'test', pillar: 'test', dataType: 'test', fiscalYear: 'test', memberName: 'test', memberId: 'test', memberType: 'test', isValidResponse: 'test', description: 'test', status: 'test' })
})

describe('view', () => {
  it('returns simple view', () => {
    const view = validationResults.view()
    expect(typeof view).toBe('object')
    expect(view.id).toBe(validationResults.id)
    expect(typeof view.createdBy).toBe('object')
    expect(view.createdBy.id).toBe(user.id)
    expect(view.taskId).toBe(validationResults.taskId)
    expect(view.dpCode).toBe(validationResults.dpCode)
    expect(view.dpCodeId).toBe(validationResults.dpCodeId)
    expect(view.companyId).toBe(validationResults.companyId)
    expect(view.companyName).toBe(validationResults.companyName)
    expect(view.keyIssueId).toBe(validationResults.keyIssueId)
    expect(view.keyIssue).toBe(validationResults.keyIssue)
    expect(view.pillarId).toBe(validationResults.pillarId)
    expect(view.pillar).toBe(validationResults.pillar)
    expect(view.dataType).toBe(validationResults.dataType)
    expect(view.fiscalYear).toBe(validationResults.fiscalYear)
    expect(view.memberName).toBe(validationResults.memberName)
    expect(view.memberId).toBe(validationResults.memberId)
    expect(view.memberType).toBe(validationResults.memberType)
    expect(view.isValidResponse).toBe(validationResults.isValidResponse)
    expect(view.description).toBe(validationResults.description)
    expect(view.status).toBe(validationResults.status)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })

  it('returns full view', () => {
    const view = validationResults.view(true)
    expect(typeof view).toBe('object')
    expect(view.id).toBe(validationResults.id)
    expect(typeof view.createdBy).toBe('object')
    expect(view.createdBy.id).toBe(user.id)
    expect(view.taskId).toBe(validationResults.taskId)
    expect(view.dpCode).toBe(validationResults.dpCode)
    expect(view.dpCodeId).toBe(validationResults.dpCodeId)
    expect(view.companyId).toBe(validationResults.companyId)
    expect(view.companyName).toBe(validationResults.companyName)
    expect(view.keyIssueId).toBe(validationResults.keyIssueId)
    expect(view.keyIssue).toBe(validationResults.keyIssue)
    expect(view.pillarId).toBe(validationResults.pillarId)
    expect(view.pillar).toBe(validationResults.pillar)
    expect(view.dataType).toBe(validationResults.dataType)
    expect(view.fiscalYear).toBe(validationResults.fiscalYear)
    expect(view.memberName).toBe(validationResults.memberName)
    expect(view.memberId).toBe(validationResults.memberId)
    expect(view.memberType).toBe(validationResults.memberType)
    expect(view.isValidResponse).toBe(validationResults.isValidResponse)
    expect(view.description).toBe(validationResults.description)
    expect(view.status).toBe(validationResults.status)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })
})
