import { Taxonomies } from '.'
import { User } from '../user'

let user, taxonomies

beforeEach(async () => {
  user = await User.create({ email: 'a@a.com', password: '123456' })
  taxonomies = await Taxonomies.create({ createdBy: user, categoryId: 'test', themeId: 'test', keyIssueId: 'test', indicatorId: 'test', indicatorName: 'test', indicatorDescription: 'test', indicatorPolarity: 'test', dataCollectionGuide: 'test', unit: 'test', dataInput: 'test', isApplicableSector: 'test', notApplicableReason: 'test', datapointType: 'test', datapointReportingPeriod: 'test', fileDataSource: 'test', sourceUrl: 'test', sourcePublicationDate: 'test', sourcePageNumber: 'test', sourceTextSnippetOrSnapshot: 'test', commentsAndCalculations: 'test', signal: 'test', controversy: 'test', controversySnippetOrSnapshot: 'test', snippetOrSnapshotUrl: 'test', sourcePublicationDateOfConspiracy: 'test', conspiracyPageNumber: 'test', normalizedBy: 'test', weighted: 'test', status: 'test' })
})

describe('view', () => {
  it('returns simple view', () => {
    const view = taxonomies.view()
    expect(typeof view).toBe('object')
    expect(view.id).toBe(taxonomies.id)
    expect(typeof view.createdBy).toBe('object')
    expect(view.createdBy.id).toBe(user.id)
    expect(view.categoryId).toBe(taxonomies.categoryId)
    expect(view.themeId).toBe(taxonomies.themeId)
    expect(view.keyIssueId).toBe(taxonomies.keyIssueId)
    expect(view.indicatorId).toBe(taxonomies.indicatorId)
    expect(view.indicatorName).toBe(taxonomies.indicatorName)
    expect(view.indicatorDescription).toBe(taxonomies.indicatorDescription)
    expect(view.indicatorPolarity).toBe(taxonomies.indicatorPolarity)
    expect(view.dataCollectionGuide).toBe(taxonomies.dataCollectionGuide)
    expect(view.unit).toBe(taxonomies.unit)
    expect(view.dataInput).toBe(taxonomies.dataInput)
    expect(view.isApplicableSector).toBe(taxonomies.isApplicableSector)
    expect(view.notApplicableReason).toBe(taxonomies.notApplicableReason)
    expect(view.datapointType).toBe(taxonomies.datapointType)
    expect(view.datapointReportingPeriod).toBe(taxonomies.datapointReportingPeriod)
    expect(view.fileDataSource).toBe(taxonomies.fileDataSource)
    expect(view.sourceUrl).toBe(taxonomies.sourceUrl)
    expect(view.sourcePublicationDate).toBe(taxonomies.sourcePublicationDate)
    expect(view.sourcePageNumber).toBe(taxonomies.sourcePageNumber)
    expect(view.sourceTextSnippetOrSnapshot).toBe(taxonomies.sourceTextSnippetOrSnapshot)
    expect(view.commentsAndCalculations).toBe(taxonomies.commentsAndCalculations)
    expect(view.signal).toBe(taxonomies.signal)
    expect(view.controversy).toBe(taxonomies.controversy)
    expect(view.controversySnippetOrSnapshot).toBe(taxonomies.controversySnippetOrSnapshot)
    expect(view.snippetOrSnapshotUrl).toBe(taxonomies.snippetOrSnapshotUrl)
    expect(view.sourcePublicationDateOfConspiracy).toBe(taxonomies.sourcePublicationDateOfConspiracy)
    expect(view.conspiracyPageNumber).toBe(taxonomies.conspiracyPageNumber)
    expect(view.normalizedBy).toBe(taxonomies.normalizedBy)
    expect(view.weighted).toBe(taxonomies.weighted)
    expect(view.status).toBe(taxonomies.status)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })

  it('returns full view', () => {
    const view = taxonomies.view(true)
    expect(typeof view).toBe('object')
    expect(view.id).toBe(taxonomies.id)
    expect(typeof view.createdBy).toBe('object')
    expect(view.createdBy.id).toBe(user.id)
    expect(view.categoryId).toBe(taxonomies.categoryId)
    expect(view.themeId).toBe(taxonomies.themeId)
    expect(view.keyIssueId).toBe(taxonomies.keyIssueId)
    expect(view.indicatorId).toBe(taxonomies.indicatorId)
    expect(view.indicatorName).toBe(taxonomies.indicatorName)
    expect(view.indicatorDescription).toBe(taxonomies.indicatorDescription)
    expect(view.indicatorPolarity).toBe(taxonomies.indicatorPolarity)
    expect(view.dataCollectionGuide).toBe(taxonomies.dataCollectionGuide)
    expect(view.unit).toBe(taxonomies.unit)
    expect(view.dataInput).toBe(taxonomies.dataInput)
    expect(view.isApplicableSector).toBe(taxonomies.isApplicableSector)
    expect(view.notApplicableReason).toBe(taxonomies.notApplicableReason)
    expect(view.datapointType).toBe(taxonomies.datapointType)
    expect(view.datapointReportingPeriod).toBe(taxonomies.datapointReportingPeriod)
    expect(view.fileDataSource).toBe(taxonomies.fileDataSource)
    expect(view.sourceUrl).toBe(taxonomies.sourceUrl)
    expect(view.sourcePublicationDate).toBe(taxonomies.sourcePublicationDate)
    expect(view.sourcePageNumber).toBe(taxonomies.sourcePageNumber)
    expect(view.sourceTextSnippetOrSnapshot).toBe(taxonomies.sourceTextSnippetOrSnapshot)
    expect(view.commentsAndCalculations).toBe(taxonomies.commentsAndCalculations)
    expect(view.signal).toBe(taxonomies.signal)
    expect(view.controversy).toBe(taxonomies.controversy)
    expect(view.controversySnippetOrSnapshot).toBe(taxonomies.controversySnippetOrSnapshot)
    expect(view.snippetOrSnapshotUrl).toBe(taxonomies.snippetOrSnapshotUrl)
    expect(view.sourcePublicationDateOfConspiracy).toBe(taxonomies.sourcePublicationDateOfConspiracy)
    expect(view.conspiracyPageNumber).toBe(taxonomies.conspiracyPageNumber)
    expect(view.normalizedBy).toBe(taxonomies.normalizedBy)
    expect(view.weighted).toBe(taxonomies.weighted)
    expect(view.status).toBe(taxonomies.status)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })
})
